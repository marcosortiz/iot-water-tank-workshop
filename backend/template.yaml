AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31

Parameters:
    Username:
        Type: String
        AllowedPattern: "^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$"        
        Description: A valid email address is required

Resources: 
    UserPool:
        Type: "AWS::Cognito::UserPool"
        Properties:
            AutoVerifiedAttributes:
                - email
            MfaConfiguration: 'OFF'
            Schema:
                - 
                    AttributeDataType: String
                    Name: email
                    Required: true
            AdminCreateUserConfig: 
                AllowAdminCreateUserOnly: true
                InviteMessageTemplate:
                    EmailMessage:
                        Fn::Sub: |
                            <p>You are invited to join the AWS IoT Water Tank Workshop. Your temporary password is as follows:</p>
                            <p>
                            username: {username} <br />
                            Password: <strong>{####}</strong>
                            </p>
                            <p>
                            Please sign in to the GUI with your username and temporary password provided above.
                            </p>
                    EmailSubject: Your temporary password for the AWS IoT Water Tank Workshop
            EmailVerificationMessage: "Your AWS IoT Water Tank Workshop verification code is {####}."
            UsernameAttributes:
                - email
    AdminRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - 
                        Effect: "Allow"
                        Principal:
                            Federated:
                                - "cognito-identity.amazonaws.com"
                        Action:
                            - "sts:AssumeRoleWithWebIdentity"
                        Condition:
                            StringEquals:
                                cognito-identity.amazonaws.com:aud: !Ref IdentityPool
            Path: "/"
            Policies:
                - 
                    PolicyName: !Sub '${AWS::StackName}-ddb'
                    PolicyDocument:
                        Version: '2012-10-17'
                        Statement:
                            - 
                                Effect: Allow
                                Action:
                                    - dynamodb:GetItem
                                    - dynamodb:PutItem
                                    - dynamodb:Query
                                Resource: '*'
    AdminGroup:
        Type: AWS::Cognito::UserPoolGroup
        Properties: 
            Description: Administrators
            GroupName: Admins
            RoleArn: !GetAtt AdminRole.Arn
            UserPoolId: !Ref UserPool
    User:
        Type: AWS::Cognito::UserPoolUser
        Properties:
            DesiredDeliveryMediums: 
                - EMAIL
            UserAttributes: 
                - Name: email
                  Value: !Ref Username
            Username: !Ref Username
            UserPoolId: !Ref UserPool
    UserPoolClient:
        Type: AWS::Cognito::UserPoolClient
        Properties:
            GenerateSecret: false
            RefreshTokenValidity: 200
            UserPoolId: !Ref UserPool
    IdentityPool:
        Type: AWS::Cognito::IdentityPool
        Properties:
            AllowUnauthenticatedIdentities: false
            CognitoIdentityProviders:
                - 
                    ClientId: !Ref UserPoolClient
                    ProviderName: !GetAtt UserPool.ProviderName
    IdentityPoolAuthRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - 
                        Effect: "Allow"
                        Principal:
                            Federated:
                                - "cognito-identity.amazonaws.com"
                        Action:
                            - "sts:AssumeRoleWithWebIdentity"
                        Condition:
                            StringEquals:
                                cognito-identity.amazonaws.com:aud: !Ref IdentityPool
                            ForAnyValue:StringLike:
                                cognito-identity.amazonaws.com:amr: authenticated
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/AWSIoTDataAccess
                - arn:aws:iam::aws:policy/AWSIoTConfigAccess
            Path: "/"
            Policies:
                - 
                    PolicyName: !Sub '${AWS::StackName}-sts'
                    PolicyDocument:
                        Version: '2012-10-17'
                        Statement:
                            - 
                                Effect: Allow
                                Action:
                                    - mobileanalytics:PutEvents
                                    - cognito-sync:*
                                    - cognito-identity:*
                                Resource: '*'
                - 
                    PolicyName: !Sub '${AWS::StackName}-lambda'
                    PolicyDocument:
                        Version: '2012-10-17'
                        Statement:
                            - Effect: Allow
                              Action:
                                - lambda:InvokeFunction
                              Resource: 
                                - !GetAtt ListTanks.Arn
    IdentityPoolRoleAttachment:
        Type: AWS::Cognito::IdentityPoolRoleAttachment
        Properties:
            IdentityPoolId: !Ref IdentityPool
            Roles:
                authenticated: !GetAtt IdentityPoolAuthRole.Arn
    IotTankPolicy:
        Type: AWS::IoT::Policy
        Properties:
            PolicyDocument: !Sub |
                {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action":["iot:Connect"],
                            "Resource": ["*"]
                        },{
                            "Effect": "Allow",
                            "Action":[
                                "iot:Publish"
                            ],
                            "Resource": [
                                "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/tanks/${!iot:ClientId}/telemetry",
                                "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/tanks/${!iot:ClientId}/cmds/ack",
                                "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/$aws/things/${!iot:ClientId}/shadow/update"
                            ]
                        },{
                            "Effect": "Allow",
                            "Action":[
                                "iot:Subscribe"
                            ],
                            "Resource": [
                                "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topicfilter/tanks/${!iot:ClientId}/cmds",
                                "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topicfilter/$aws/things/${!iot:ClientId}/*"
                            ]
                        },{
                            "Effect": "Allow",
                            "Action":[
                                "iot:Receive"
                            ],
                            "Resource": [
                                "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/tanks/${!iot:ClientId}/cmds",
                                "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/$aws/things/${!iot:ClientId}/*"
                            ]
                        }
                    ]
                }
    IotWebPolicy:
        Type: AWS::IoT::Policy
        Properties:
            PolicyDocument: !Sub |
                {
                    "Version": "2012-10-17",
                    "Statement": [{
                        "Effect": "Allow",
                        "Action":["iot:Connect"],
                        "Resource": ["*"]
                    },{
                        "Effect": "Allow",
                        "Action":[
                            "iot:Publish"
                        ],
                        "Resource": [
                            "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/tanks/*",
                            "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/$aws/things/*/shadow/get"
                        ]
                    },{
                        "Effect": "Allow",
                        "Action":[
                            "iot:Subscribe"
                        ],
                        "Resource": [
                            "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topicfilter/tanks/*",
                            "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topicfilter/$aws/things/*/shadow/update/accepted",
                            "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topicfilter/$aws/things/*/shadow/get/accepted"
                        ]
                    },{
                        "Effect": "Allow",
                        "Action":[
                            "iot:Receive"
                        ],
                        "Resource": [
                            "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/tanks/*",
                            "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/$aws/things/*/shadow/update/accepted",
                            "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/$aws/things/*/shadow/get/accepted"
                        ]
                    }]
                }
    CognitoPrincipalAttachment:
        Type: AWS::IoT::PolicyPrincipalAttachment
        Properties: 
            PolicyName: !Ref IotWebPolicy
            Principal: !Ref IdentityPool
    ThingsTable:
        Type: AWS::Serverless::SimpleTable
        Properties:
            PrimaryKey:
                Name: thingName
                Type: String
            ProvisionedThroughput:
                ReadCapacityUnits: 1
                WriteCapacityUnits: 1
    iotKeysAndCertsBucket:
        Type: AWS::S3::Bucket
    AttachCertToThing:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: ./src
            Handler: tanks/provisioning/attachCertToThing.attachCertToThing
            Runtime: nodejs8.10
            Policies:
                - AWSLambdaExecute # Managed Policy
                - Version: '2012-10-17' # Policy Document
                  Statement:
                    - Effect: Allow
                      Action:
                        - iot:AttachThingPrincipal
                      Resource: '*'
    AttachPolicyToCert:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: ./src
            Handler: tanks/provisioning/attachPolicyToCert.attachPolicyToCert
            Runtime: nodejs8.10
            Environment:
                Variables:
                    POLICY_NAME: !Ref IotTankPolicy
            Policies:
                - AWSLambdaExecute # Managed Policy
                - Version: '2012-10-17' # Policy Document
                  Statement:
                    - Effect: Allow
                      Action:
                        - iot:AttachPolicy
                      Resource: '*'
    CheckIfThingExists:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: ./src
            Handler: tanks/provisioning/checkIfThingExists.checkIfThingExists
            Runtime: nodejs8.10
            Policies:
                - AWSLambdaExecute # Managed Policy
                - Version: '2012-10-17' # Policy Document
                  Statement:
                    - Effect: Allow
                      Action:
                        - iot:DescribeThing
                      Resource: '*'
    CheckProvisioning:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: ./src
            Handler: tanks/provisioning/checkProvisioning.checkProvisioning
            Runtime: nodejs8.10
            Environment:
                Variables:
                    S3_BUCKET: !Ref iotKeysAndCertsBucket
                    THINGS_TABLE: !Ref ThingsTable
                    POLICY_NAME: !Ref IotTankPolicy
            Policies:
                - AWSLambdaExecute # Managed Policy
                - Version: '2012-10-17' # Policy Document
                  Statement:
                    - Effect: Allow
                      Action:
                        - dynamodb:PutItem
                      Resource: !GetAtt ThingsTable.Arn
    CheckThingAttachments:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: ./src
            Handler: tanks/provisioning/checkThingAttachments.checkThingAttachments
            Runtime: nodejs8.10
            Policies:
                - AWSLambdaExecute # Managed Policy
    CreateKeysAndCert:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: ./src
            Handler: tanks/provisioning/createKeysAndCert.createKeysAndCert
            Runtime: nodejs8.10
            Environment:
                Variables:
                    S3_BUCKET: !Ref iotKeysAndCertsBucket
            Policies:
                - AWSLambdaExecute # Managed Policy
                - Version: '2012-10-17' # Policy Document
                  Statement:
                    - Effect: Allow
                      Action:
                        - iot:CreateKeysAndCertificate
                      Resource: '*'
                    - Effect: Allow
                      Action:
                        - s3:PutObject
                      Resource: !Sub arn:aws:s3:::${iotKeysAndCertsBucket}/* 
    CreateThing:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: ./src
            Handler: tanks/provisioning/createThing.createThing
            Runtime: nodejs8.10
            Policies:
                - AWSLambdaExecute # Managed Policy
                - Version: '2012-10-17' # Policy Document
                  Statement:
                    - Effect: Allow
                      Action:
                        - iot:CreateThing
                      Resource: '*'
    DeleteCert:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: ./src
            Handler: tanks/provisioning/deleteCert.deleteCert
            Runtime: nodejs8.10
            Environment:
                Variables:
                    S3_BUCKET: !Ref iotKeysAndCertsBucket
            Policies:
                - AWSLambdaExecute # Managed Policy
                - Version: '2012-10-17' # Policy Document
                  Statement:
                    - Effect: Allow
                      Action:
                        - iot:DeleteCertificate
                      Resource: '*'
                    - Effect: Allow
                      Action:
                        - s3:DeleteObject
                      Resource: !Sub arn:aws:s3:::${iotKeysAndCertsBucket}/* 
    DeleteMetadata:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: ./src
            Handler: tanks/provisioning/deleteMetadata.deleteMetadata
            Runtime: nodejs8.10
            Environment:
                Variables:
                    THINGS_TABLE: !Ref ThingsTable
            Policies:
                - AWSLambdaExecute # Managed Policy
                - Version: '2012-10-17' # Policy Document
                  Statement:
                    - Effect: Allow
                      Action:
                        - dynamodb:DeleteItem
                      Resource: !GetAtt ThingsTable.Arn
    DeleteThing:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: ./src
            Handler: tanks/provisioning/deleteThing.deleteThing
            Runtime: nodejs8.10
            Policies:
                - AWSLambdaExecute # Managed Policy
                - Version: '2012-10-17' # Policy Document
                  Statement:
                    - Effect: Allow
                      Action:
                        - iot:DeleteThing
                      Resource: '*'
    DetachCertFromThing:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: ./src
            Handler: tanks/provisioning/detachCertFromThing.detachCertFromThing
            Runtime: nodejs8.10
            Policies:
                - AWSLambdaExecute # Managed Policy
                - Version: '2012-10-17' # Policy Document
                  Statement:
                    - Effect: Allow
                      Action:
                        - iot:DetachThingPrincipal
                      Resource: '*'
    DetachPolicyFromCert:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: ./src
            Handler: tanks/provisioning/detachPolicyFromCert.detachPolicyFromCert
            Runtime: nodejs8.10
            Environment:
                Variables:
                    POLICY_NAME: !Ref IotTankPolicy
            Policies:
                - AWSLambdaExecute # Managed Policy
                - Version: '2012-10-17' # Policy Document
                  Statement:
                    - Effect: Allow
                      Action:
                        - iot:DetachPolicy
                      Resource: '*'
    DisableCert:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: ./src
            Handler: tanks/provisioning/disableCert.disableCert
            Runtime: nodejs8.10
            Environment:
                Variables:
                    THINGS_TABLE: !Ref ThingsTable
            Policies:
                - AWSLambdaExecute # Managed Policy
                - Version: '2012-10-17' # Policy Document
                  Statement:
                    - Effect: Allow
                      Action:
                        - dynamodb:GetItem
                      Resource: !GetAtt ThingsTable.Arn
                    - Effect: Allow
                      Action:
                        - iot:UpdateCertificate
                      Resource: '*'
    ListTanks:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: ./src
            Handler: tanks/listTanks.listTanks
            Runtime: nodejs8.10
            Environment:
                Variables:
                    THINGS_TABLE: !Ref ThingsTable
            Policies:
                - AWSLambdaExecute # Managed Policy
                - Version: '2012-10-17' # Policy Document
                  Statement:
                    - Effect: Allow
                      Action:
                        - dynamodb:Scan
                      Resource: !GetAtt ThingsTable.Arn
    DetachPrincipals:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: ./src
            Handler: cleanup/detachPrincipals.detachPrincipals
            Runtime: nodejs8.10
            Policies:
                - AWSLambdaExecute # Managed Policy
                - Version: '2012-10-17' # Policy Document
                  Statement:
                    - Effect: Allow
                      Action:
                        - iot:ListPolicyPrincipals
                        - iot:DetachPrincipalPolicy
                      Resource: '*'
    RepublishTelemetry:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: ./src
            Handler: events/republish/republishTelemetry.republishTelemetry
            Runtime: nodejs8.10
            Events:
              RepublishForIotEvents:              
                  Type: IoTRule
                  Properties:
                    Sql: "SELECT topic(2) as tankId, telemetry FROM 'tanks/+/telemetry'"
            Policies:
                - AWSLambdaExecute # Managed Policy
                - Version: '2012-10-17' # Policy Document
                  Statement:
                    - Effect: Allow
                      Action:
                        - iot:DescribeEndpoint
                        - iot:Publish
                      Resource: '*'
    batchPutMessage:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: ./src
            Handler: events/batchPutMessage/batchPutMessage.batchPutMessage
            Runtime: nodejs8.10
            Events:
              RepublishForIotEvents:              
                  Type: IoTRule
                  Properties:
                    Sql: "SELECT * FROM 'tanks/+/checkThresholds'"
            Policies:
                - AWSLambdaExecute # Managed Policy
                - Version: '2012-10-17' # Policy Document
                  Statement:
                    - Effect: Allow
                      Action:
                        - iotevents:BatchPutMessage
                      Resource: !Sub 'arn:aws:iotevents:${AWS::Region}:${AWS::AccountId}:input/${TankLevelInput}'
    ProvisionRole:
        Type: AWS::IAM::Role
        Properties : 
            AssumeRolePolicyDocument: 
                Version: "2012-10-17"
                Statement: 
                    - 
                      Effect: "Allow"
                      Principal: 
                        Service: 
                          - "states.amazonaws.com"
                      Action: 
                        - "sts:AssumeRole"
            Policies:
                - 
                    PolicyName: !Sub '${AWS::StackName}-lambda'
                    PolicyDocument:
                        Version: '2012-10-17'
                        Statement:
                            - 
                                Effect: Allow
                                Action:
                                    - lambda:InvokeFunction
                                Resource:
                                    - !GetAtt AttachCertToThing.Arn
                                    - !GetAtt AttachPolicyToCert.Arn
                                    - !GetAtt CheckIfThingExists.Arn
                                    - !GetAtt CheckProvisioning.Arn
                                    - !GetAtt CheckThingAttachments.Arn
                                    - !GetAtt CreateKeysAndCert.Arn
                                    - !GetAtt CreateThing.Arn
                                    - !GetAtt DeleteCert.Arn
                                    - !GetAtt DeleteMetadata.Arn
                                    - !GetAtt DeleteThing.Arn
                                    - !GetAtt DetachCertFromThing.Arn
                                    - !GetAtt DetachPolicyFromCert.Arn
                                    - !GetAtt DisableCert.Arn

    ProvisionThing:
        Type: AWS::StepFunctions::StateMachine
        Properties:
            DefinitionString: !Sub |
                {
                    "Comment":"If a thing with the same name does not exists, create it and attach a new cert and policy to it.",
                    "StartAt":"fetchThing",
                    "States":{
                        "fetchThing":{
                            "Type":"Task",
                            "Resource":"${CheckIfThingExists.Arn}",
                            "Next":"doesThingExists"
                        },
                        "doesThingExists":{
                            "Type":"Choice",
                            "Choices":[
                                {
                                    "Variable":"$.exists",
                                    "BooleanEquals":true,
                                    "Next":"thingAlreadyExistsFail"
                                },
                                {
                                    "Variable":"$.exists",
                                    "BooleanEquals":false,
                                    "Next":"provisionThing"
                                }
                            ]
                        },
                        "thingAlreadyExistsFail":{
                            "Type":"Fail",
                            "Error":"Thing already exists."
                        },
                        "provisionThing":{
                            "Type":"Parallel",
                            "Next":"checkProvisioning",
                            "Branches":[
                                {
                                    "StartAt":"createThing",
                                    "States":{
                                        "createThing":{
                                            "Type":"Task",
                                            "Resource":"${CreateThing.Arn}",
                                            "End":true
                                        }
                                    }
                                },
                                {
                                    "StartAt":"createKeysAndCerts",
                                    "States":{
                                        "createKeysAndCerts":{
                                            "Type":"Task",
                                            "Resource":"${CreateKeysAndCert.Arn}",
                                            "End":true
                                        }
                                    }
                                }
                            ]
                        },
                        "checkProvisioning":{
                            "Type":"Task",
                            "Resource":"${CheckProvisioning.Arn}",
                            "Next":"attachResourses"
                        },
                        "attachResourses":{
                            "Type":"Parallel",
                            "Next":"checkAttachments",
                            "Branches":[
                                {
                                    "StartAt":"attachPolicyToCert",
                                    "States":{
                                        "attachPolicyToCert":{
                                            "Type":"Task",
                                            "Resource":"${AttachPolicyToCert.Arn}",
                                            "End":true
                                        }
                                    }
                                },
                                {
                                    "StartAt":"attachCertToThing",
                                    "States":{
                                        "attachCertToThing":{
                                            "Type":"Task",
                                            "Resource":"${AttachCertToThing.Arn}",  
                                            "End":true
                                        }
                                    }
                                }
                            ]
                        },
                        "checkAttachments":{
                            "Type":"Task",
                            "Resource":"${CheckThingAttachments.Arn}",
                            "End":true
                        }
                    }
                }
            RoleArn: !GetAtt ProvisionRole.Arn
    RemoveThing:
        Type: AWS::StepFunctions::StateMachine
        Properties:
            DefinitionString: !Sub |
                {
                    "Comment":"If the thing exists, delete it and any cert and policy attached to it.",
                    "StartAt":"fetchThing",
                    "States":{
                        "fetchThing":{
                            "Type":"Task",
                            "Resource":"${CheckIfThingExists.Arn}",
                            "Next":"doesThingExists"
                        },
                        "doesThingExists":{
                            "Type":"Choice",
                            "Choices":[
                                {
                                    "Variable":"$.exists",
                                    "BooleanEquals":false,
                                    "Next":"thingDoesNotExistsFail"
                                },
                                {
                                    "Variable":"$.exists",
                                    "BooleanEquals":true,
                                    "Next":"disableCert"
                                }
                            ]
                        },
                        "thingDoesNotExistsFail":{
                            "Type":"Fail",
                            "Error":"Thing does not already exists."
                        },
                        "disableCert":{
                            "Type":"Task",
                            "Resource":"${DisableCert.Arn}",
                            "Next":"detachEntities"
                        },
                        "detachEntities":{
                            "Type":"Parallel",
                            "Next":"checkDetachments",
                            "Branches":[
                                {
                                    "StartAt":"detachPolicyFromCert",
                                    "States":{
                                        "detachPolicyFromCert":{
                                            "Type":"Task",
                                            "Resource":"${DetachPolicyFromCert.Arn}",
                                            "End":true
                                        }
                                    }
                                },
                                {
                                    "StartAt":"detachCertFromThing",
                                    "States":{
                                        "detachCertFromThing":{
                                            "Type":"Task",
                                            "Resource":"${DetachCertFromThing.Arn}",
                                            "End":true
                                        }
                                    }
                                }
                            ]
                        },
                        "checkDetachments":{
                            "Type":"Pass",
                            "Next":"deleteResources",
                            "OutputPath":"$[0]"
                        },
                        "deleteResources":{
                            "Type":"Parallel",
                            "OutputPath":"$[1]",
                            "Next":"deleteMetadata",
                            "Branches":[
                                {
                                    "StartAt":"deleteCert",
                                    "States":{
                                        "deleteCert":{
                                            "Type":"Task",
                                            "Resource":"${DeleteCert.Arn}",
                                            "End":true
                                        }
                                    }
                                },
                                {
                                    "StartAt":"deleteThing",
                                    "States":{
                                        "deleteThing":{
                                            "Type":"Task",
                                            "Resource":"${DeleteThing.Arn}",
                                            "End":true
                                        }
                                    }
                                }
                            ]
                        },
                        "deleteMetadata":{
                            "Type":"Task",
                            "Resource":"${DeleteMetadata.Arn}",
                            "End":true
                        }
                    }
                }
            RoleArn: !GetAtt ProvisionRole.Arn
    IoTEventsRole:
        Type: AWS::IAM::Role
        Properties : 
            AssumeRolePolicyDocument: 
                Version: "2012-10-17"
                Statement: 
                    - 
                      Effect: "Allow"
                      Principal: 
                        Service: 
                          - "iotevents.amazonaws.com"
                      Action: 
                        - "sts:AssumeRole"
            Path: /service-role/
            Policies:
                - 
                    PolicyName: !Sub '${AWS::StackName}-iotevents'
                    PolicyDocument:
                        Version: '2012-10-17'
                        Statement:
                            - 
                                Effect: Allow
                                Action:
                                    - iot:Publish
                                Resource:
                                    - !Sub 'arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/*'
                            -
                                Effect: Allow
                                Action:
                                    - sns:Publish
                                Resource:
                                    - !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:*'
                            -
                                Effect: Allow
                                Action:
                                    - sqs:SendMessage
                                Resource:
                                    - !Sub 'arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:*'
                            -
                                Effect: Allow
                                Action:
                                    - lambda:InvokeFunction
                                Resource:
                                    - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:*'
                            -
                                Effect: Allow
                                Action:
                                    - firehose:PutRecord
                                    - firehose:PutRecordBatch
                                Resource:
                                    - !Sub 'arn:aws:firehose:${AWS::Region}:${AWS::AccountId}:deliverystream/*'
                            -
                                Effect: Allow
                                Action:
                                    - iotevents:BatchPutMessage
                                Resource:
                                    - !Sub 'arn:aws:iotevents:${AWS::Region}:${AWS::AccountId}:input/*'
    TankLevelInput:
        Type: AWS::IoTEvents::Input
        Properties:
            InputName: tankLevel
            InputDescription: Tank Level (%)
            InputDefinition:
                Attributes:
                    - JsonPath: tankId
                    - JsonPath: sensorData.tankLevel
    TankLevelDetectorModel:
        Type: AWS::IoTEvents::DetectorModel
        Properties:
            DetectorModelName: TankLevelThresholds
            DetectorModelDescription: Detects and alerts when tank level goes beyong high and hich-hich thresholds
            Key: tankId
            RoleArn: !GetAtt IoTEventsRole.Arn
            DetectorModelDefinition:
                InitialStateName: initializing
                States:
                    -
                        StateName: normal
                        OnInput:
                            Events:
                                -
                                    EventName: Min Threshold Exceeded
                                    Condition: !Sub '$input.${TankLevelInput}.sensorData.tankLevel < $variable.minThreshold'
                                    Actions:
                                        - 
                                            SetVariable:
                                                VariableName: minThresholdExceeded
                                                Value: true
                                -
                                    EventName: Max Threshold Exceeded
                                    Condition: !Sub '$input.${TankLevelInput}.sensorData.tankLevel > $variable.maxThreshold'
                                    Actions:
                                        - 
                                            SetVariable:
                                                VariableName: maxThresholdExceeded
                                                Value: true
                            TransitionEvents:
                                -
                                    EventName: thresholdExceeded
                                    Condition: !Sub '$input.${TankLevelInput}.sensorData.tankLevel < $variable.minThreshold || $input.${TankLevelInput}.sensorData.tankLevel > $variable.maxThreshold'
                                    NextState: dangerous
                    -
                        StateName: dangerous
                        OnInput:
                            Events:
                                -
                                    EventName: Min Threshold Back Ok
                                    Condition: !Sub '$input.${TankLevelInput}.sensorData.tankLevel >= $variable.minThreshold'
                                    Actions:
                                        - 
                                            SetVariable:
                                                VariableName: minThresholdExceeded
                                                Value: false
                                -
                                    EventName: Max Threshold Back OK
                                    Condition: !Sub '$input.${TankLevelInput}.sensorData.tankLevel <= $variable.maxThreshold'
                                    Actions:
                                        - 
                                            SetVariable:
                                                VariableName: maxThresholdExceeded
                                                Value: false
                            TransitionEvents:
                                -
                                    EventName: backToNormal
                                    Condition: !Sub '$input.${TankLevelInput}.sensorData.tankLevel >= $variable.minThreshold && $input.${TankLevelInput}.sensorData.tankLevel <= $variable.maxThreshold'
                                    Actions:
                                        -
                                            IotTopicPublish:
                                                    MqttTopic: tanks/levelBackToNormal
                                    NextState: normal
                        OnEnter:
                            Events:
                                -
                                    EventName: Publish MQTT
                                    Condition: true
                                    Actions:
                                        - 
                                            IotTopicPublish:
                                                MqttTopic: tanks/levelThresholdExceeded
                    -
                        StateName: initializing
                        OnInput:
                            TransitionEvents:
                                -
                                    EventName: normal
                                    Condition: true
                                    NextState: normal
                        OnEnter:
                            Events:
                                -
                                    EventName: Initialize variables
                                    Condition: true
                                    Actions:
                                        - 
                                            SetVariable:
                                                VariableName: minThreshold
                                                Value: 15
                                        - 
                                            SetVariable:
                                                VariableName: maxThreshold
                                                Value: 85
                                        - 
                                            SetVariable:
                                                VariableName: minThresholdExceeded
                                                Value: false
                                        - 
                                            SetVariable:
                                                VariableName: maxThresholdExceeded
                                                Value: false
    IoTRepublishRole:
        Type: AWS::IAM::Role
        Properties : 
            AssumeRolePolicyDocument: 
                Version: "2012-10-17"
                Statement: 
                    - 
                      Effect: "Allow"
                      Principal: 
                        Service: 
                          - "iot.amazonaws.com"
                      Action: 
                        - "sts:AssumeRole"
            Path: /service-role/
            Policies:
                - 
                    PolicyName: !Sub '${AWS::StackName}-iotrepublish'
                    PolicyDocument:
                        Version: '2012-10-17'
                        Statement:
                            - 
                                Effect: Allow
                                Action:
                                    - iot:Publish
                                Resource:
                                    - !Sub 'arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/*'

Outputs:
    UserPoolId:
        Description: UserPoolId id
        Value: !Ref UserPool
    IdentityPoolId:
        Description: IdentityPoolId id
        Value: !Ref IdentityPool
    userPoolWebClientId:
        Description: The user pool web client id
        Value: !Ref UserPoolClient
    ThingsTable:
        Description: Table used to hold iot things metadata
        Value: !Ref ThingsTable
    iotKeysAndCertsBucket:
        Description: S3 bucket that will store iot keys and certs
        Value: !Ref iotKeysAndCertsBucket
    IotWebPolicy:
        Description: The AWS IoT policy that will be used by the frontend
        Value: !Ref IotWebPolicy
    ListTanks:
        Description: Lambda function used to list tanks
        Value: !Ref ListTanks
    ProvisionThing:
        Description: State machine arn for provisioning tanks.
        Value: !Ref ProvisionThing
    RemoveThing:
        Description: State machine arn for removing tanks.
        Value: !Ref RemoveThing